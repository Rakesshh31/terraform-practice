--------------------🚨git🚨--------------------------------
Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

*****Installation for Git in your local laptop :
 URL- https://git-scm.com/downloads   #it support os like Windows,Linux,Mac.

yum install git -y # for linux 

After completed of installation go to cmd promt check : git --version 


git init -----to intilaise git process (Optional)

-----introduce yourself to Git-------------- 
------all commands start with git only-----------------

---------------------Git commands---------------------
----------------### Tell Git who you are----------------------------
git config --global user.name --- to check configured name 
git config --global user.email --- to check configured email

Below Example :--

git config --global user.name "veer"
git config --global user.email "cloud87777@gmail.com"



--------------------🚨git workflow🚨------------

git status ---- to check file will be tracked or untracked 
git add -----to add file into staging area from local working directory
git status ----to see the status of the file where it is 
git commit -m "comment"
git push 


-------------------------🚨GITHUB🚨------------------------------
 GitHub is one of the most popular resources for developers to share code and work on projects together. It’s free, easy to use, and has become central in the movement toward open-source software.


git clone ---- to clone entire repository in first time 

git pull ------to pull the updates and changes from repository

git push ------to push the local updates into remote repo




-----git push----- SSH ----

# push the changes by using SSH #

### To generate SSH Key

ssh-keygen (give this command into your terminal)

copy the publickey id_rsa.pub

paste into github ssh keys 

settings-->ssh and GPG keys--> Add new ssh key and give any name and paste it your publickey over there 



Note:-
If we clone a repository by using https method while push time if you want to use different method we have to remove existing https endpoint and add new  endpoint 

to check origin endpoint:      git remote -v
To remove existing endpoint:   git remote remove origin
 
To set new origin              git remote add <name> <url>


Ex: git remote add  CloudTechDevOps git@github.com:CloudTechDevOps/project0730.git 





####### Git Token method #######


# push the chnages by using GitHUb Token #

###To generate Token 

settings-->Developer settings-->personal access token -->Token classic --> generate token

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


# Example:

git push https://<token>:/user/repository.git

Examples:



git push https://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@github.com:/user/repository.git


git push https://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@github.com:/CloudTechDevOps/project0730.git


git remote add  origin https://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@github.com:/CloudTechDevOps/project0730.git



------------------ #🚨 Issues in git #🚨 ------------------------------
# unable to push ?

----if two developers are working with same repository and same branch

This error occurs when you attempt to push your local changes to the remote repo without updating your local repo with new changes made to the remote repo by other devloper.

your push request will fails when the difference will come local to remote commit id's 

so first pull updates changes into local and then push it 

case-1 --
## git pull ##
git pull origin <branch name> if multiple branches are there in remote 

git pull ---if only one branch is there 

after that merge the changes into local and push your changes in to remote 

git pull fastfarward works only if commit divergence local and remote

if user forgot to update the local repo fastfwd not allow to merge in between

in this case we have tow options 

git pull --no-rebase #works like merge one extra merge commit will create

git pill ---rebase #worksl linear without extra commit but here current commit will be renamed  



#How To Resolve Merge Conflicts?  ---(-conflicts raises due to in same branch while push time and  different branches while merging time )

Trying to update different data into same file same line same branch git conflicts occurred 

While merging the two branches if changes are made to two different branches then git will not merge automatically it prompts the user to resolve the merge conflicts manually. Below are the steps to resolve the merge conflicts in git: 

Step 1: Identify the conflict files.

Git will automatically display a message by indicating the file to be resolved from merge conflicts. You have to resolve the conflicts manually.

Step 2: Open the conflict files.

Open the merge conflict files by using editors whatever you are convenient with like (IDE). After opening we can conflict markers as shown below it will indicate where the conflicts are located.

Conflict markers

(<<<<<<<, =======, and >>>>>>>) 
Step 3: Resolve the conflicts.

Remove the unnecessary changes after examining them carefully and keep the changes that are more important.

Step 4: Moving to the staging.

Use the git add command to add the updated files to the staging area after the conflicts have been resolved.

Step 5: Commit and Push the changes

After resolving conflicts commit the changes by using the below command. Including the message which gives information about changes made while resolving the conflicts.

git commit -m "message"
Push the changes made to the remote repository by using. Below command.

git push 
Where other developers can access the code. And perform any changes that are required.

After resolving the conflicts, it is crucial to carefully analyze and test the merged code to make sure that the modifications are functioning as intended and that no new problems have been introduced. These procedures can help developers resolve merge disputes in Git and maintain a dependable and stable codebase.
  



BRANCHES:
It's an individual process of development for code.
we create individual branch in real-time to do test and developed.
each developer will work on their own branch.
At the end we will merge all branches into actual branch.
Default branch is Master or MAin.

git branch		        : to list the branches
git branch dev	                : to create a new branch
git checkout dev	        : to switch from one branch to another.
git checkout -b dev             : to create and switch from one branch to another.
git branch -m oldname newname	: to rename a branch
git branch -D dev	        : to delete a branch

benefits:


1. We can identify the issues before push into main branch

2. We can overcome git conflicts 

3. Rollback process is easy

4. code verified & approved so reduced deployment activities




----  # Git ignore # ---------

Git Ignore
When sharing your code with others, there are often files or parts of your project, you do not want to share.

Examples

log files
temporary files
hidden files
personal files
etc.
Git can specify which files or parts of your project should be ignored by Git using a .gitignore file.

Git will not track files and folders specified in .gitignore. However, the .gitignore file itself IS tracked by Git.

Create .gitignore
To create a .gitignore file, go to the root of your local Git, and create it:

Example
touch .gitignore
Now open the file using a text editor.

We are just going to add two simple rules:

Ignore any files with the .log extension
Ignore everything in any directory named temp
Example
# ignore ALL .log files
*.log

# ignore ALL files in ANY directory named temp
temp/
Now all .log files and anything in temp folders will be ignored by Git.


 ----- # GIT Fork #-----

Forking a repository means creating a copy of the repo. When you fork a repo, you create your own copy of the repo on your GitHub account. When several developers want to work on a project but need to make changes that are inappropriate for the original repository, forking is frequently used



=======================================

---------------------------------------------------------------------------------
                  #🚨 Revert changes on git🚨 #
-------------------------------------------------------------------------------
# Revert changes from working directory #

   git restore <file_name> 
          or
   git checkout -- <file_name>     like undo command


# Revert changes from Staging Area #

   git restore --staged <file_name>  #to unstage changes from Staging area to working directory  
  

# Revert changes from Local Repository #
 
   git reset HEAD~1         # to revert changes from local repo to working directory 
   

#if The git reset HEAD~2 command moves the current branch backward by two commits
   
Note: if you can give git status or any git commit command everything clear no untracked file no staging files 

                                                          
Git reset we have three modes (optional)

Mixed—its is default mode discard the commits both local repo and staging area 
Git reset --mixed commit id   


Soft -- discard the commits in local repo only file will be available both staging and working directory
Git reset --soft commit id   

Hard : discard the commits in local repo , staging and working directory aswell

Git reset --hard commit id   

=========================🚨 git revert 🚨=========================
git revert is used to undo a commit by creating a new commit that reverses the changes. This is different from git reset, which alters history. git revert is safe for public branches because it doesn’t rewrite history.

Basic Git Revert Commands

1.Revert a single commit

git revert <commit-hash>
This creates a new commit that undoes the changes of the specified commit.

Revert multiple commits (one by one)

2.git revert <oldest-commit-hash>^..<newest-commit-hash>
Example:

git revert abc123^..def456
This will revert each commit in that range, in order.

3.Revert a commit without opening editor

git revert --no-edit <commit-hash>


=================🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨===============================

Example: Git Blocking Checkout Due to Conflicting Changes
🔧 Step-by-step Setup
1️⃣ Create a Git repo and add a file

echo "Line from main branch" > demo.txt
git add demo.txt
git commit -m "Initial commit on main"

2️⃣ Create a new branch and change the file

git checkout -b feature
echo "Line from feature branch" > demo.txt
git commit -am "Modified demo.txt in feature branch"

3️⃣ Go back to main

git checkout main
4️⃣ Make a local change to the same file — but DON'T commit

echo "Uncommitted local change" > demo.txt
At this point:

demo.txt has local changes (uncommitted)

You’re on main

You’re trying to switch to feature where demo.txt also changed

5️⃣ Now try switching:

git checkout feature
❌ Git Will Block You
You will see:

error: Your local changes to the following files would be overwritten by checkout:
    demo.txt
Please commit your changes or stash them before you switch branches.
Aborting

✅ How to Fix It
Option 1: Stash the change

git stash
git checkout feature
git stash pop
Option 2: Commit the change
git add demo.txt
git commit -m "Temporary save"
git checkout feature

?? Why This Happens
Git refuses to switch branches because it would have to overwrite your local uncommitted changes to demo.txt — which risks data loss.



================== git stash =======================

1. List Your Stashes
First, confirm that your stash was created and note its identifier:

git stash list

You should see a list of stashes, such as:
stash@{0}: WIP on main: 65484b4 Merge branch 'main' of github.com:CloudTechDevOps/multidev

2. View the Stash Contents
To see what was included in the stash, especially to check for file200k, use:
git stash show -p stash@{0}
Replace stash@{0} with the appropriate stash reference if it's different. This command shows a detailed diff of the stashed changes

3. Apply the Stash
To recover the stashed file and return it to your working directory, you can apply the stash:
git stash apply stash@{0}

or

git stash pop stash@{0}
The apply command restores the changes without removing the stash, while pop applies the changes and removes the stash.
Drop Stash
•	To remove a specific stash without applying it:
git stash drop stash@{n}
•	To remove all stashes:
git stash clear


--------------- 🚨# git cherry pick #🚨-----------------------

if we want to merge specific commit into upstream branch (like main ) cherry pick will help us 


After adding multiple commits into own branch if you want to push specific commit use cherry-pick command 

Take the commit id and checkout to target branch where you want to push the specific commit info and run below command 

git cherry-pick <committed>

git push to target branch so we can see specific file info related commit only instead of all 



=================================== git cherry-pick vs git merge ======================

| Feature         | `git cherry-pick`                                   | `git merge`                                          |
| --------------- | --------------------------------------------------- | ---------------------------------------------------- |
| Purpose         | Apply specific commit(s) from one branch to another | Combine **all** changes from one branch into another |
| History Impact  | Adds only selected commits                          | Merges complete branch history                       |
| Common Use Case | Picking specific features/bug fixes                 | Combining full branches (e.g., feature → main)       |


========================================================== explanation git push rejects =========================

🚨 Issues in Git — Unable to Push? 🚨
📌 Problem:
When two developers work on the same branch of a Git repository, you may encounter a push failure like:

! [rejected]        main -> main (non-fast-forward)
error: failed to push some refs to 'origin'
This happens because your local branch is behind the remote branch — new commits exist on the remote that you don’t have locally. Git blocks the push to avoid overwriting others' work.

🛠️ Solution: Pull Before You Push
✅ Case 1: Simple Pull
If you're on a branch and want to pull the latest changes:


git pull origin <branch-name>
If there is only one remote branch and it's tracked, simply:

git pull
This will fetch and then merge remote changes into your local branch.

⛓️ Fast-forward vs Merge vs Rebase
1. ✅ Fast-forward Pull
Works only when your local branch has no commits ahead of remote.

Simply moves your branch pointer forward.

No merge commit is created.


git pull  # fast-forward if possible
2. 🔁 Pull with Merge (non-fast-forward)
If your local and remote branches have diverged (i.e., both have new commits), Git performs a merge by default.


git pull --no-rebase
This creates a merge commit.

Maintains history of both branches separately.

3. 🔄 Pull with Rebase (linear history)

git pull --rebase
Applies your local commits on top of the fetched remote branch.

Avoids merge commits.

Creates a linear commit history.

Note: This renames local commits (new hashes).

⚠️ Important Tips
Merge (--no-rebase): Safer for teams unfamiliar with rebase; shows all branching history.

Rebase (--rebase): Cleaner history, but don’t rebase public/shared branches without caution.


================================================= 🚨conflicts🚨 =============================================

How to Resolve Merge Conflicts in Git
Merge conflicts typically occur in the following scenarios:

🔄 Same Branch Conflict: When two developers edit the same line of the same file and push to the same branch.

🔀 Different Branch Conflict: When merging two branches with changes in the same part of the file.

✅ Steps to Resolve Merge Conflicts
Step 1: Identify the Conflict Files
When a conflict occurs, Git stops the merge and shows a message like:


Auto-merging filename.txt
CONFLICT (content): Merge conflict in filename.txt
You can list all conflicted files using:


git status
Step 2: Open the Conflict Files
Open the conflicted files using your preferred code editor or IDE.

You will see conflict markers like:


<<<<<<< HEAD
Your changes (from current branch)
=======
Incoming changes (from merging branch)
>>>>>>> branch-name

Step 3: Resolve the Conflicts
Manually edit the file:

Choose the correct code (yours, theirs, or a combination).

Remove all conflict markers (<<<<<<<, =======, >>>>>>>).

Save the file after fixing.

Step 4: Stage the Resolved Files
Once the conflicts are resolved, stage the files using:


git add <file-name>
Step 5: Commit and Push the Changes
Commit the resolved changes:


git commit -m "Resolved merge conflict in <file-name>"
Then push the changes to the remote repository:


git push
🧪 Final Step: Test the Code
After resolving the conflicts:

Carefully test the application to ensure that merged changes work correctly.

Verify that no logic is broken or overwritten.

🔁 Summary
Step	Action
Step 1	Identify conflicted files with git status
Step 2	Open and inspect conflict markers
Step 3	Resolve and remove conflict markers
Step 4	Stage the resolved files with git add
Step 5	Commit and push changes

 Git Branch Protection Rules
Branch protection prevents unauthorized or accidental changes to critical branches (like main, master, or release). These rules help enforce workflows, reviews, and CI/CD integrity.

✅ Common Git Branch Protection Rules (GitHub Example)
Protection Rule	Purpose
Require pull request before merging	Prevents direct push to the branch. All changes must go via PR.
Require approvals	Ensures code review. You can require 1+ approved reviews.


